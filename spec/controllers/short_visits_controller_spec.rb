require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ShortVisitsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # ShortVisit. As you add validations to ShortVisit, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ShortVisitsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all short_visits as @short_visits" do
      short_visit = ShortVisit.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:short_visits)).to eq([short_visit])
    end
  end

  describe "GET #show" do
    it "assigns the requested short_visit as @short_visit" do
      short_visit = ShortVisit.create! valid_attributes
      get :show, params: {id: short_visit.to_param}, session: valid_session
      expect(assigns(:short_visit)).to eq(short_visit)
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested short_visit" do
      short_visit = ShortVisit.create! valid_attributes
      expect {
        delete :destroy, params: {id: short_visit.to_param}, session: valid_session
      }.to change(ShortVisit, :count).by(-1)
    end

    it "redirects to the short_visits list" do
      short_visit = ShortVisit.create! valid_attributes
      delete :destroy, params: {id: short_visit.to_param}, session: valid_session
      expect(response).to redirect_to(short_visits_url)
    end
  end

end
